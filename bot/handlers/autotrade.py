from typing import Literal, cast
import torch
from trainer.model_manager.state_manager import StateManager
from strategy.adaptive_strategy import adapt_risk_params
from trading.binance_trader import BinanceTrader


def handle_autotrade(
    bot, chat_id, symbol, unified_data, current_step,
    historical_sentiment_scores, historical_fg_scores,
    features, balance
):
    bot.send_message(chat_id, f"ü§ñ –ó–∞–ø—É—Å–∫–∞—é –∞–≤—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥ –¥–ª—è {symbol}")

    trader = BinanceTrader()

    # –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π –∏ PPO –∞–≥–µ–Ω—Ç–∞
    lstm_models = bot.lstm_models
    lstm_scalers = bot.lstm_scalers
    np_models = bot.np_models
    xgb_model, xgb_scaler_X, xgb_scaler_y = bot.xgb_model, bot.xgb_scaler_X, bot.xgb_scaler_y
    ppo_agent = bot.ppo_agent

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–µ—Ä–µ–∑ StateManager
    state_manager = StateManager(
        lstm_models, lstm_scalers, np_models,
        xgb_model, xgb_scaler_X, xgb_scaler_y,
        historical_sentiment_scores,
        historical_fg_scores,
        features
    )

    # –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    state = state_manager.create_state(unified_data, current_step)
    state_tensor = torch.tensor(state, dtype=torch.float32).unsqueeze(0)

    # –ü—Ä–æ–≥–Ω–æ–∑ sentiment –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    sentiment_score = historical_sentiment_scores[-1]

    # PPO –∞–≥–µ–Ω—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ
    action, _ = ppo_agent.predict(state_tensor, deterministic=True)

    # –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä–∏—Å–∫–∞ –∏ sentiment threshold
    risk_params = adapt_risk_params()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ sentiment threshold –ø–æ—Å–ª–µ PPO —Ä–µ—à–µ–Ω–∏—è
    if action != 0 and abs(sentiment_score) < risk_params["sentiment_threshold"]:
        bot.send_message(chat_id, f"‚è≥ –°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ sentiment ({sentiment_score:.2f} < {risk_params['sentiment_threshold']:.2f}).")
        return

    if action == 0:
        bot.send_message(chat_id, f"‚è≥ PPO-–∞–≥–µ–Ω—Ç —Ä–µ—à–∏–ª –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å —Å–¥–µ–ª–∫—É ({symbol}).")
        return

    # –ü–æ–ª—É—á–∞–µ–º ATR –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–∏–º–≤–æ–ª–∞
    atr = unified_data[current_step, features.index('atr')]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ (–µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç–∞)
    position = trader.get_position(symbol)
    if position:
        trader.close_all_positions(symbol)
        bot.send_message(chat_id, f"üîÑ –ó–∞–∫—Ä—ã—Ç–∞ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è –ø–æ {symbol}.")

    # –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º–∏ SL –∏ TP
    side: Literal['buy', 'sell'] = cast(Literal['buy', 'sell'], 'buy' if action == 1 else 'sell')

    trader.create_order_with_sl_tp(
        symbol=symbol,
        side=side,
        balance=balance,
        risk_percent=risk_params["risk_percent"],
        atr=atr,
        sl_multiplier=risk_params["sl_multiplier"],
        tp_multiplier=risk_params["tp_multiplier"],
        adaptive=True
    )

    bot.send_message(
        chat_id,
        f"üöÄ –û—Ç–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è {side.upper()} –ø–æ {symbol}\n\n"
        f"üéØ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–¥–µ–ª–∫–∏:\n"
        f"‚Ä¢ –†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É: {risk_params['risk_percent']*100:.2f}% –æ—Ç –±–∞–ª–∞–Ω—Å–∞\n"
        f"‚Ä¢ Sentiment-–ø–æ—Ä–æ–≥: {risk_params['sentiment_threshold']:.2f}\n"
        f"‚Ä¢ TP multiplier: {risk_params['tp_multiplier']}\n"
        f"‚Ä¢ SL multiplier: {risk_params['sl_multiplier']}"
    )

    bot.send_message(chat_id, "‚úÖ –ê–≤—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω!")
