from trainer.model_manager import ModelManager
from trading.binance_trader import BinanceTrader
from data.atr import get_combined_atr
from strategy.adaptive_strategy import adapt_strategy
import torch


def handle_autotrade(bot, chat_id):
    symbols = bot.coin_manager.get_current_coins()
    trader = BinanceTrader()
    strategy_params = adapt_strategy()

    bot.send_message(chat_id, f"ü§ñ –ó–∞–ø—É—Å–∫–∞—é –∞–≤—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥ –¥–ª—è: {', '.join(symbols)}")

    balance = trader.exchange.fetch_balance()['free']['USDT']
    risk_percent = 0.02

    for symbol in symbols:
        manager = ModelManager(symbol)
        agent = manager.load_trained_model()
        if agent is None:
            bot.send_message(chat_id, f"‚ö†Ô∏è PPO-–º–æ–¥–µ–ª—å –¥–ª—è {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            continue

        state_data, sentiment_score, fear_greed_scaled = manager.get_state_data()
        if state_data is None:
            bot.send_message(chat_id, f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            continue

        state_tensor = torch.tensor(state_data, dtype=torch.float32).unsqueeze(0)
        action = agent.predict(state_tensor, deterministic=True)[0]

        if action == 0:
            bot.send_message(chat_id, f"‚è≥ {symbol}: –∞–≥–µ–Ω—Ç —Ä–µ—à–∏–ª –Ω–µ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å.")
            continue

        side = 'buy' if action == 1 else 'sell'
        atr = get_combined_atr(manager.get_historical_data())

        position = trader.get_position(symbol)
        if position:
            trader.close_all_positions(symbol)
            bot.send_message(chat_id, f"üîÑ –ó–∞–∫—Ä—ã—Ç–∞ —Ç–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è –ø–æ {symbol}.")

        trader.create_order_with_sl_tp(
            symbol=symbol,
            side=side,
            balance=balance,
            risk_percent=risk_percent,
            atr=atr,
            sl_multiplier=strategy_params.get('sl_multiplier', 1.5),
            tp_multiplier=strategy_params.get('tp_multiplier', 3),
            adaptive=True
        )

        bot.send_message(chat_id, f"üöÄ –û—Ç–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è {side.upper()} –ø–æ {symbol}")

    bot.send_message(chat_id, "‚úÖ –ê–≤—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω!")
