from datetime import datetime

import numpy as np
import pandas as pd

from trainer.model_manager.state_manager import StateManager
from data.atr import get_combined_atr


def handle_predict(bot, message, symbol='BTC/USDT', timeframe='1h'):
    chat_id = message.chat.id

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–∂–∏–¥–∞–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞
    waiting_message = bot.bot.send_message(chat_id, "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ ‚Äî –∏–¥—ë—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑...")

    combined_data = bot.data_fetcher.fetch_historical_data_multi_timeframe(symbol)

    if timeframe not in combined_data or combined_data[timeframe].empty:
        bot.bot.edit_message_text(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol} –Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ {timeframe}.", chat_id, waiting_message.message_id)
        return

    current_step = len(combined_data[timeframe]) - 1

    lstm_models = {tf: bot.lstm_manager.load_model(tf) for tf in ['15m', '1h', '4h', '1d']}
    lstm_scalers = {tf: bot.lstm_manager.load_scaler(tf) for tf in ['15m', '1h', '4h', '1d']}
    np_models = {tf: bot.np_manager.load_model(tf) for tf in ['15m', '1h', '4h', '1d']}
    xgb_model, xgb_scaler_X, xgb_scaler_y = bot.xgb_manager.load_model_and_scalers()
    ppo_agent = bot.ppo_manager.load_model()

    # === –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å–∫–µ–π–ª–µ—Ä–æ–≤ ===
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å–∫–µ–π–ª–µ—Ä–æ–≤:")

    # LSTM —Å–∫–µ–π–ª–µ—Ä—ã
    for tf, scaler in lstm_scalers.items():
        if hasattr(scaler, 'mean_') and hasattr(scaler, 'var_'):
            print(f"‚úÖ LSTM scaler [{tf}]: mean={scaler.mean_}, var={scaler.var_}")
        else:
            print(f"‚ùå LSTM scaler [{tf}] –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π!")

    # XGB —Å–∫–µ–π–ª–µ—Ä—ã
    if hasattr(xgb_scaler_X, 'mean_') and hasattr(xgb_scaler_X, 'var_'):
        print(f"‚úÖ XGB scaler_X: mean={xgb_scaler_X.mean_}, var={xgb_scaler_X.var_}")
    else:
        print("‚ùå XGB scaler_X –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π!")

    if hasattr(xgb_scaler_y, 'mean_') and hasattr(xgb_scaler_y, 'var_'):
        print(f"‚úÖ XGB scaler_y: mean={xgb_scaler_y.mean_}, var={xgb_scaler_y.var_}")
    else:
        print("‚ùå XGB scaler_y –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π!")

    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n")
    # ==============================================

    if None in (*lstm_models.values(), *np_models.values(), xgb_model, ppo_agent):
        bot.edit_message_text("‚ö†Ô∏è –ù–µ –≤—Å–µ –º–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –ø—Ä–æ–≤–µ—Ä—å –æ–±—É—á–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏.", chat_id, waiting_message.message_id)
        return

    # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ sentiment –¥–∞–Ω–Ω—ã—Ö
    sentiment_analyzer = bot.sentiment_analyzer

    unique_dates = pd.to_datetime(combined_data[timeframe].index.date)
    filtered_dates = [date for date in unique_dates.unique() if date.date() <= datetime.utcnow().date()]

    def fetch_news_for_date(date):
        return bot.market_analyzer.news_fetcher.fetch_news_for_date(date=date.strftime('%Y-%m-%d'), symbol='BTC')

    historical_sentiment_scores = sentiment_analyzer.get_historical_sentiment_scores(
        filtered_dates, fetch_news_for_date
    )

    historical_sentiment_scores_full = sentiment_analyzer.map_sentiment_to_candles(
        combined_data[timeframe], filtered_dates, historical_sentiment_scores
    )

    fg_index, _ = bot.market_analyzer.get_full_analysis()['fear_and_greed'].values()
    fg_scaled = fg_index / 100 if fg_index else 0.5
    historical_fg_scores = [fg_scaled] * len(combined_data[timeframe])

    state_manager = StateManager(
        lstm_models, lstm_scalers, np_models,
        xgb_model, xgb_scaler_X, xgb_scaler_y,
        historical_sentiment_scores_full, historical_fg_scores, bot.lstm_manager.features
    )

    state = state_manager.create_state(combined_data, current_step)

    action, _ = ppo_agent.predict(state, deterministic=True)
    action = action.item() if isinstance(action, np.ndarray) else action  # –¥–æ–±–∞–≤—å —ç—Ç—É —Å—Ç—Ä–æ—á–∫—É
    decision = {0: "‚è≥ –£–¥–µ—Ä–∂–∏–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é", 1: "üìà –ü–æ–∫—É–ø–∞—Ç—å", 2: "üìâ –ü—Ä–æ–¥–∞–≤–∞—Ç—å"}[action]

    current_price = combined_data[timeframe]['close'].iloc[-1]
    atr = get_combined_atr(combined_data)
    adx = combined_data[timeframe]['adx'].iloc[-1]

    lstm_pred = state[-5]
    np_pred = state[-4]
    xgb_pred = state[-3]
    sentiment_score = state[-2]
    fg_scaled = state[-1]

    reasons = [
        f"LSTM –ø—Ä–æ–≥–Ω–æ–∑: {'–≤—ã—à–µ üìà' if lstm_pred > current_price else '–Ω–∏–∂–µ üìâ'} —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã",
        f"NeuralProphet –ø—Ä–æ–≥–Ω–æ–∑: {'–≤—ã—à–µ üìà' if np_pred > current_price else '–Ω–∏–∂–µ üìâ'} —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã",
        f"XGBoost –ø—Ä–æ–≥–Ω–æ–∑: {'–≤—ã—à–µ üìà' if xgb_pred > current_price else '–Ω–∏–∂–µ üìâ'} —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã",
        f"Sentiment-–∞–Ω–∞–ª–∏–∑: {sentiment_score:.2f}",
        f"Fear & Greed –∏–Ω–¥–µ–∫—Å: {fg_scaled:.2f}",
        f"–¢—Ä–µ–Ω–¥ (ADX): {'—Å–∏–ª—å–Ω—ã–π üöÄ' if adx > 25 else '—Å–ª–∞–±—ã–π üê¢'} ({adx:.2f})",
        f"–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (ATR): {atr:.2f}$"
    ]

    final_message = (
        f"üîÆ <b>–ê–Ω–∞–ª–∏–∑ {symbol}</b>\n\n"
        f"üìç –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: <b>{current_price:.2f}$</b>\n"
        f"üß† LSTM –ø—Ä–æ–≥–Ω–æ–∑: <b>{lstm_pred:.2f}$</b>\n"
        f"üìÖ NeuralProphet –ø—Ä–æ–≥–Ω–æ–∑: <b>{np_pred:.2f}$</b>\n"
        f"üöÄ XGBoost –ø—Ä–æ–≥–Ω–æ–∑: <b>{xgb_pred:.2f}$</b>\n"
        f"üì∞ Sentiment-–∞–Ω–∞–ª–∏–∑: <b>{sentiment_score:.2f}</b>\n"
        f"üìå Fear & Greed –∏–Ω–¥–µ–∫—Å: <b>{fg_scaled:.2f}</b>\n"
        f"üìà –¢—Ä–µ–Ω–¥ (ADX): <b>{adx:.2f}</b>\n"
        f"üåä –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (ATR): <b>{atr:.2f}$</b>\n\n"
        f"üéØ –ò—Ç–æ–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ PPO-–∞–≥–µ–Ω—Ç–∞: <b>{decision}</b>\n\n"
        f"üîç –ü—Ä–∏—á–∏–Ω—ã –ø—Ä–∏–Ω—è—Ç–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è:\n- " + "\n- ".join(reasons)
    )

    # –ó–∞–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞ –∏—Ç–æ–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
    bot.bot.edit_message_text(final_message, chat_id, waiting_message.message_id, parse_mode='HTML')

