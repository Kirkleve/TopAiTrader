import os
from trainer.train import train  # —Ç–≤–æ–π –Ω–æ–≤—ã–π —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å!
from data.cmc_data import MarketDataFetcher
from bot.manage_coins import CoinManager

def handle_manage(bot, message):
    coins = bot.coin_manager.get_current_coins()

    pnl_report = "\n".join([
        f"{coin.split('/')[0]}: –°–µ–≥–æ–¥–Ω—è {bot.trader.get_pnl_period(coin, 'day')}%, "
        f"–ù–µ–¥–µ–ª—è {bot.trader.get_pnl_period(coin, 'week')}%, "
        f"–ú–µ—Å—è—Ü {bot.trader.get_pnl_period(coin, 'month')}%, "
        f"–ì–æ–¥ {bot.trader.get_pnl_period(coin, 'year')}%"
        for coin in coins
    ])

    bot.send_message(
        message.chat.id,
        f"üíé –ö–∞–∫—É—é –º–æ–Ω–µ—Ç—É –±—É–¥–µ–º —Ç–æ—Ä–≥–æ–≤–∞—Ç—å?\n\nüìå –¢–µ–∫—É—â–∏–µ –º–æ–Ω–µ—Ç—ã –∏ –∏—Ö PNL:\n{pnl_report}"
    )

    bot.bot.register_next_step_handler(
        message, lambda msg: process_coin_choice(bot, msg)
    )

def process_coin_choice(bot, message):
    coin = message.text.strip().upper().replace('/USDT', '')
    coin_full = coin + '/USDT'

    market_fetcher = MarketDataFetcher()
    top_100_coins = market_fetcher.fetch_top_100()

    if coin not in top_100_coins:
        bot.send_message(
            message.chat.id,
            "üö´ –ò–∑–≤–∏–Ω–∏, —Ç–∞–∫–æ–π –º–æ–Ω–µ—Ç—ã –Ω–µ—Ç –∏–ª–∏ –æ–Ω–∞ –Ω–µ –≤ —Ç–æ–ø-100 CoinMarketCap."
        )
        return

    coin_manager: CoinManager = bot.coin_manager

    if coin_full in coin_manager.get_current_coins():
        bot.send_message(
            message.chat.id,
            f"‚ö†Ô∏è –ú–æ–Ω–µ—Ç–∞ {coin} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏ —Ç–æ—Ä–≥—É–µ—Ç—Å—è! –ü—Ä–æ—Å—Ç–æ –∑–∞–ø—É—Å—Ç–∏ /autotrade."
        )
        return

    if coin_manager.coin_limit_reached():
        pnl_report = "\n".join([
            f"{c.split('/')[0]} ({bot.trader.get_pnl_period(c, 'day'):+.2f}%)"
            for c in coin_manager.get_current_coins()
        ])

        bot.send_message(
            message.chat.id,
            f"üö´ –£–∂–µ —Ç–æ—Ä–≥—É–µ—Ç—Å—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –º–æ–Ω–µ—Ç (5):\n{pnl_report}\n\n"
            f"üìå –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ {coin}:"
        )
        bot.bot.register_next_step_handler(
            message, lambda msg: replace_coin_choice(bot, msg, coin)
        )
    else:
        result = coin_manager.add_coin(coin)
        bot.send_message(message.chat.id, result)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –û–ë–ï–ò–• –º–æ–¥–µ–ª–µ–π (LSTM+DQN)
        lstm_model_dir = f'trainer/models/{coin}_USDT'
        dqn_model_path = f'trading/trained_agent_{coin}_USDT.pth'

        if not os.path.exists(lstm_model_dir) or not os.path.exists(dqn_model_path):
            bot.send_message(message.chat.id, f"‚è≥ –û–±—É—á–∞—é –º–æ–¥–µ–ª–∏ –¥–ª—è {coin}/USDT (~3-5 –º–∏–Ω.)...")
            train(coin_full)  # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
            bot.send_message(message.chat.id, f"‚úÖ –ú–æ–¥–µ–ª–∏ –¥–ª—è {coin}/USDT —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω—ã!")
        else:
            bot.send_message(message.chat.id, f"‚úÖ –ú–æ–¥–µ–ª–∏ –¥–ª—è {coin}/USDT —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç!")

def replace_coin_choice(bot, message, new_coin):
    old_coin = message.text.strip().upper()
    old_coin_full = old_coin + '/USDT'

    coin_manager: CoinManager = bot.coin_manager

    if old_coin_full not in coin_manager.get_current_coins():
        bot.send_message(
            message.chat.id,
            f"‚ö†Ô∏è –ú–æ–Ω–µ—Ç–∞ {old_coin} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ —Ç–æ—Ä–≥—É–µ–º—ã—Ö."
        )
        return

    result = coin_manager.replace_coin(old_coin, new_coin)
    bot.send_message(message.chat.id, result)

    lstm_model_dir = f'trainer/models/{new_coin}_USDT'
    dqn_model_path = f'trading/trained_agent_{new_coin}_USDT.pth'

    if not os.path.exists(lstm_model_dir) or not os.path.exists(dqn_model_path):
        bot.send_message(message.chat.id, f"‚è≥ –û–±—É—á–∞—é –º–æ–¥–µ–ª–∏ –¥–ª—è {new_coin}/USDT (~3-5 –º–∏–Ω.)...")
        train(new_coin + '/USDT')  # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
        bot.send_message(message.chat.id, f"‚úÖ –ú–æ–¥–µ–ª–∏ –¥–ª—è {new_coin}/USDT —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω—ã!")
    else:
        bot.send_message(message.chat.id, f"‚úÖ –ú–æ–¥–µ–ª–∏ –¥–ª—è {new_coin}/USDT —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç!")
