def handle_market(bot, message):
    symbols = ['BTC', 'ETH', 'BNB', 'XRP', 'SOL', 'LTC', 'DOGE', 'ADA']
    analysis = bot.market_analyzer.market_data_fetcher.fetch_market_data(symbols=symbols)

    def escape_markdown(text):
        escape_chars = r'_*[\]()~`>#+-=|{}.!'
        for char in escape_chars:
            text = text.replace(char, f"\\{char}")
        return text

    response = "üìä *–ü–æ–¥—Ä–æ–±–Ω—ã–π –æ–±–∑–æ—Ä —Ä—ã–Ω–∫–∞:*\n\n"

    for symbol in symbols:
        data = analysis.get(symbol, {})
        price = data.get('price', '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
        change = data.get('change_24h', '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
        volume = data.get('volume_24h', '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')

        if price != '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö' and change != '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö' and volume != '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö':
            response += (
                f"üí∞ *{escape_markdown(symbol)}*\n"
                f"‚îú –¶–µ–Ω–∞: *{price:,.2f}$*\n"
                f"‚îú –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á: *{change:.2f}%*\n"
                f"‚îî –û–±—ä—ë–º (24—á): *{volume:,.0f}$*\n\n"
            )
        else:
            response += f"üí∞ *{escape_markdown(symbol)}*: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö üî∏\n\n"

    # –¢—Ä–µ–Ω–¥—ã –ø–æ —Ä–æ—Å—Ç—É –∏ –ø–∞–¥–µ–Ω–∏—é
    prices_sorted = sorted(
        analysis.items(), key=lambda x: x[1].get('change_24h', 0), reverse=True
    )

    top_gainers = [sym for sym, _ in prices_sorted[:3]]
    top_losers = [sym for sym, _ in prices_sorted[-3:]]

    response += "üî∏ *–¢—Ä–µ–Ω–¥—ã —Ä—ã–Ω–∫–∞:*\n"
    response += f"üìà –†–∞—Å—Ç—É—Ç: {', '.join(top_gainers)}\n"
    response += f"üìâ –ü–∞–¥–∞—é—Ç: {', '.join(top_losers)}\n"

    bot.bot.send_message(
        message.chat.id,
        response,
        parse_mode="Markdown",
        disable_web_page_preview=True
    )